name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          server/package-lock.json
          client/package-lock.json
    
    - name: Install root dependencies
      run: npm ci
    
    - name: Install server dependencies
      run: cd server && npm ci
    
    - name: Install client dependencies
      run: cd client && npm ci
    
    - name: Run server tests
      run: cd server && npm test
      env:
        NODE_ENV: test
        CI: true
    
    - name: Run client tests
      run: cd client && npm test
      env:
        NODE_ENV: test
        CI: true
    
    - name: Generate server coverage
      run: cd server && npm run test:coverage
    
    - name: Generate client coverage
      run: cd client && npm run test:coverage
    
    - name: Check coverage files exist
      run: |
        echo "Checking coverage files..."
        ls -la server/coverage/ || echo "Server coverage not found"
        ls -la client/coverage/ || echo "Client coverage not found"
    
    - name: Upload server coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success() && hashFiles('server/coverage/lcov.info') != ''
      with:
        file: server/coverage/lcov.info
        flags: server
        name: server-coverage
    
    - name: Upload client coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success() && hashFiles('client/coverage/lcov.info') != ''
      with:
        file: client/coverage/lcov.info
        flags: client
        name: client-coverage

  notify:
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Telegram
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          🚀 **JamLink CI Status**
          
          📊 **Test Results:**
          - Server Tests: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - Client Tests: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}
          
          🔍 **Linting:**
          - Status: ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }}
          
          🏗️ **Build:**
          - Status: ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }}
          
          🚂 **Railway Deploy:**
          - Status: ${{ github.ref == 'refs/heads/main' && '🚀 Auto-deploying...' || '⏭️ Skipped (not main branch)' }}
          - Note: Railway автоматически деплоит при push в main
          
          📝 **Commit:** ${{ github.sha }}
          🌿 **Branch:** ${{ github.ref_name }}
          👤 **Author:** ${{ github.actor }}
          
          🔗 **View Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          server/package-lock.json
          client/package-lock.json
    
    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
    
    - name: Run server linting
      run: cd server && npm run lint
    
    - name: Run client linting
      run: cd client && npm run lint
    
    - name: Check TypeScript
      run: |
        cd server && npx tsc --noEmit
        cd ../client && npx tsc --noEmit

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          server/package-lock.json
          client/package-lock.json
    
    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci
        cd ../client && npm ci
    
    - name: Build server
      run: cd server && npm run build
    
    - name: Build client
      run: cd client && npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          server/dist/
          client/dist/

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: ./
    
    - name: Deploy to Railway
      run: |
        echo "Deploying to Railway..."
        # Add Railway deployment commands here
        # railway login --token ${{ secrets.RAILWAY_TOKEN }}
        # railway up

